using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text;
using System.Linq;
using Utilities;
using Xunit;
using Statistics.GraphicalRelationships;
using Statistics.Distributions;

namespace StatisticsTests.GraphicalRelationships
{
    [Trait("Category", "Unit")]
    public class GraphicalTests
    {
        [Theory]
        [InlineData(new double[] { .99, .5, .1, .02, .01, .002 }, new double[] { 500, 2000, 34900, 66900, 86000, 146000 }, 10)] //Based on Elkhorn River at Highway 91 Dodge County FIS 2008
        [InlineData(new double[] { .99, .95, .90, .85, .8, .75, .7, .65, .6, .55, .5, .45, .4, .35, .3, .25, .2, .15, .1, .05, .02, .01, .005, .0025 },
            new double[] { 6.6, 7.4, 8.55, 9.95, 11.5, 12.7, 13.85, 14.7, 15.8, 16.7, 17.5, 18.25, 19, 19.7, 20.3, 21.1, 21.95, 23, 24.2, 25.7, 27.4, 28.4, 29.1, 29.4 },
            20)]
        public void ReturnDistributionsForInputProbabilities(double[] probs, double[] flows, int erl)
        {
            Graphical graphical = new Graphical(probs, flows, erl);
            graphical.ComputeGraphicalConfidenceLimits();
            double[] outputProbs = graphical.ExceedanceProbabilities;
            foreach (double value in probs)
            {
                Assert.Contains(value, outputProbs);
            }
        }
        [Theory]
        [InlineData(new double[] { .99, .5, .1, .02, .01, .002 }, new double[] { 500, 2000, 34900, 66900, 86000, 146000 }, 5)] //Based on Elkhorn River at Highway 91 Dodge County FIS 2008
        [InlineData(new double[] { .99, .95, .90, .85, .8, .75, .7, .65, .6, .55, .5, .45, .4, .35, .3, .25, .2, .15, .1, .05, .02, .01, .005, .0025 },
            new double[] { 6.6, 7.4, 8.55, 9.95, 11.5, 12.7, 13.85, 14.7, 15.8, 16.7, 17.5, 18.25, 19, 19.7, 20.3, 21.1, 21.95, 23, 24.2, 25.7, 27.4, 28.4, 29.1, 29.4 },
            20)]
        public void ReturnDistributionsWithInputMeanValues(double[] probs, double[] flows, int erl)
        {
            Graphical graphical = new Graphical(probs, flows, erl);
            graphical.ComputeGraphicalConfidenceLimits();
            Statistics.ContinuousDistribution[] dists = graphical.StageOrLogFlowDistributions;
            double[] means = new double[dists.Length];
            for (int i = 0; i < dists.Length; i++)
            {
                means[i] = ((Normal)dists[i]).Mean;
            }
            foreach (double value in flows)
            {
                Assert.Contains(value, means);
            }
        }
        [Theory]
        [InlineData(new double[] { .99, .5, .1, .02, .01, .002 }, new double[] { 500, 2000, 34900, 66900, 86000, 146000 }, 5)] //Based on Elkhorn River at Highway 91 Dodge County FIS 2008
        [InlineData(new double[] { .99, .95, .90, .85, .8, .75, .7, .65, .6, .55, .5, .45, .4, .35, .3, .25, .2, .15, .1, .05, .02, .01, .005, .0025 },
            new double[] { 6.6, 7.4, 8.55, 9.95, 11.5, 12.7, 13.85, 14.7, 15.8, 16.7, 17.5, 18.25, 19, 19.7, 20.3, 21.1, 21.95, 23, 24.2, 25.7, 27.4, 28.4, 29.1, 29.4 },
            20)]
        public void ReturnSameNumberOfProbabilitesAsDistributions(double[] probs, double[] flows, int erl)
        {
            Graphical graphical = new Graphical(probs, flows, erl);
            graphical.ComputeGraphicalConfidenceLimits();
            Statistics.ContinuousDistribution[] dists = graphical.StageOrLogFlowDistributions;
            double[] prob = graphical.ExceedanceProbabilities;
            Assert.Equal(dists.Length, prob.Length);
        }

        [Theory]
        [InlineData(new double[] { .999, .5, .2, .1, .05, .01, .005, .002 }, new double[] { 10, 20, 30, 40, 50, 60, 70, 80 }, 50, new double[] { 0.9999, 0.99900, 0.99000, 0.95000, 0.90000, 0.85000, 0.80000, 0.75000, 0.70000, 0.65000, 0.60000, 0.55000, 0.50000, 0.47500, 0.45000, 0.42500, 0.40000, 0.37500, 0.35000, 0.32500, 0.30000, 0.29000, 0.28000, 0.27000, 0.26000, 0.25000, 0.24000, 0.23000, 0.22000, 0.21000, 0.20000, 0.19500, 0.19000, 0.18500, 0.18000, 0.17500, 0.17000, 0.16500, 0.16000, 0.15500, 0.15000, 0.14500, 0.14000, 0.13500, 0.13000, 0.12500, 0.12000, 0.11500, 0.11000, 0.10500, 0.10000, 0.09500, 0.09000, 0.08500, 0.08000, 0.07500, 0.07000, 0.06500, 0.06000, 0.05900, 0.05800, 0.05700, 0.05600, 0.05500, 0.05400, 0.05300, 0.05200, 0.05100, 0.05000, 0.04900, 0.04800, 0.04700, 0.04600, 0.04500, 0.04400, 0.04300, 0.04200, 0.04100, 0.04000, 0.03900, 0.03800, 0.03700, 0.03600, 0.03500, 0.03400, 0.03300, 0.03200, 0.03100, 0.03000, 0.02900, 0.02800, 0.02700, 0.02600, 0.02500, 0.02400, 0.02300, 0.02200, 0.02100, 0.02000, 0.01950, 0.01900, 0.01850, 0.01800, 0.01750, 0.01700, 0.01650, 0.01600, 0.01550, 0.01500, 0.01450, 0.01400, 0.01350, 0.01300, 0.01250, 0.01200, 0.01150, 0.01100, 0.01050, 0.01000, 0.00950, 0.00900, 0.00850, 0.00800, 0.00750, 0.00700, 0.00650, 0.00600, 0.00550, 0.00500, 0.00490, 0.00450, 0.00400, 0.00350, 0.00300, 0.00250, 0.00200, 0.00195, 0.00190, 0.00185, 0.00180, 0.00175, 0.00170, 0.00165, 0.00160, 0.00155, 0.00150, 0.00145, 0.00140, 0.00135, 0.00130, 0.00125, 0.00120, 0.00115, 0.00110, 0.00105, 0.00100, 0.00095, 0.00090, 0.00085, 0.00080, 0.00075, 0.00070, 0.00065, 0.00060, 0.00055, 0.00050, 0.00045, 0.00040, 0.00035, 0.00030, 0.00025, 0.00020, 0.00015, 0.00010 })]
        [InlineData(new double[] { .999, .57, .2, .1, .05, .01, .005, .002 }, new double[] { 10, 20, 30, 40, 50, 60, 70, 80 }, 40, new double[] { 0.9999, 0.99900, 0.99000, 0.95000, 0.90000, 0.85000, 0.80000, 0.75000, 0.70000, 0.65000, 0.60000, .57, 0.55000, 0.50000, 0.47500, 0.45000, 0.42500, 0.40000, 0.37500, 0.35000, 0.32500, 0.30000, 0.29000, 0.28000, 0.27000, 0.26000, 0.25000, 0.24000, 0.23000, 0.22000, 0.21000, 0.20000, 0.19500, 0.19000, 0.18500, 0.18000, 0.17500, 0.17000, 0.16500, 0.16000, 0.15500, 0.15000, 0.14500, 0.14000, 0.13500, 0.13000, 0.12500, 0.12000, 0.11500, 0.11000, 0.10500, 0.10000, 0.09500, 0.09000, 0.08500, 0.08000, 0.07500, 0.07000, 0.06500, 0.06000, 0.05900, 0.05800, 0.05700, 0.05600, 0.05500, 0.05400, 0.05300, 0.05200, 0.05100, 0.05000, 0.04900, 0.04800, 0.04700, 0.04600, 0.04500, 0.04400, 0.04300, 0.04200, 0.04100, 0.04000, 0.03900, 0.03800, 0.03700, 0.03600, 0.03500, 0.03400, 0.03300, 0.03200, 0.03100, 0.03000, 0.02900, 0.02800, 0.02700, 0.02600, 0.02500, 0.02400, 0.02300, 0.02200, 0.02100, 0.02000, 0.01950, 0.01900, 0.01850, 0.01800, 0.01750, 0.01700, 0.01650, 0.01600, 0.01550, 0.01500, 0.01450, 0.01400, 0.01350, 0.01300, 0.01250, 0.01200, 0.01150, 0.01100, 0.01050, 0.01000, 0.00950, 0.00900, 0.00850, 0.00800, 0.00750, 0.00700, 0.00650, 0.00600, 0.00550, 0.00500, 0.00490, 0.00450, 0.00400, 0.00350, 0.00300, 0.00250, 0.00200, 0.00195, 0.00190, 0.00185, 0.00180, 0.00175, 0.00170, 0.00165, 0.00160, 0.00155, 0.00150, 0.00145, 0.00140, 0.00135, 0.00130, 0.00125, 0.00120, 0.00115, 0.00110, 0.00105, 0.00100, 0.00095, 0.00090, 0.00085, 0.00080, 0.00075, 0.00070, 0.00065, 0.00060, 0.00055, 0.00050, 0.00045, 0.00040, 0.00035, 0.00030, 0.00025, 0.00020, 0.00015, 0.00010 })]
        public void ReturnsSetOfRequiredProbabilitiesAndAnyInputOutsideSet(double[] exceedanceProbabilities, double[] flowOrStageValues, int equivalentRecordLength, double[] expected)
        {
            Graphical graphical = new Graphical(exceedanceProbabilities, flowOrStageValues, equivalentRecordLength);
            graphical.ComputeGraphicalConfidenceLimits();
            double[] actual = graphical.ExceedanceProbabilities;
            Assert.Equal(expected, actual);
        }

        /// <summary>
        /// Test data: https://docs.google.com/spreadsheets/d/1GhRe3ECAFIKgRqEE8Xo6f_0lHYnHqUW0/edit?usp=sharing&ouid=105470256128470573157&rtpof=true&sd=true
        /// </summary>
        [Theory]
        [InlineData(new double[] { 0.999, 0.5, 0.2, 0.1, 0.02, 0.01, 0.005, 0.001, 0.0001 }, new double[] { 80, 11320, 18520, 23810, 35010, 39350, 42850, 47300, 52739.48924 }, 50, true, new double[] {79.92, 80, 2858.451639, 5337.228177, 6658.654778, 7550.215031, 8258.798858, 8866.700687, 9412.615319, 9918.486582, 10398.50894, 10862.93613, 11320, 11856.4513, 12395.02242, 12937.89249, 13487.3635, 14045.93339, 14616.3847, 15201.89798, 15806.20299, 16054.16048, 16306.16086, 16562.56442, 16823.7667, 17090.20399, 17362.35997, 17640.77365, 17926.04904, 18218.86703, 18520, 18736.39683, 18956.19424, 19179.57664, 19406.74265, 19637.90661, 19873.30033, 20113.17518, 20357.80435, 20607.48559, 20862.54433, 21123.33728, 21390.25671, 21663.73549, 21944.25297, 22232.34211, 22528.5979, 22833.68764, 23148.36336, 23473.47714, 23810, 24231.0174, 24668.69091, 25124.82597, 25601.54196, 26101.35072, 26627.26167, 27182.92484, 27772.8299, 27895.39, 28019.59076, 28145.48607, 28273.13255, 28402.58978, 28533.92048, 28667.19078, 28802.4704, 28939.83302, 29079.35648, 29221.1232, 29365.22049, 29511.74095, 29660.78296, 29812.45112, 29966.85685, 30124.11893, 30284.36424, 30447.72849, 30614.35707, 30784.40601, 30958.04304, 31135.44886, 31316.81843, 31502.36263, 31692.31001, 31886.90884, 32086.4295, 32291.1672, 32501.44516, 32717.61832, 32940.07765, 33169.25529, 33405.63061, 33649.73739, 33902.17257, 34163.60661, 34434.79638, 34716.60074, 35010, 35176.18123, 35346.0221, 35519.70763, 35697.43758, 35879.42803, 36065.91326, 36257.14785, 36453.40909, 36654.99989, 36862.25197, 37075.52972, 37295.23467, 37521.8108, 37755.75074, 37997.60331, 38247.98241, 38507.57791, 38777.16883, 39057.63956, 39350, 39619.12159, 39900.92632, 40196.79454, 40508.35015, 40837.52212, 41186.62691, 41558.48088, 41956.55709, 42385.20911, 42850, 42910.3666, 43163.374, 43509.54173, 43896.87678, 44337.52391, 44850.10471, 45465.41891, 45534.42774, 45605.06291, 45677.40789, 45751.55282, 45827.59528, 45905.64115, 45985.80556, 46068.21402, 46153.00372, 46240.32501, 46330.34321, 46423.24059, 46519.21889, 46618.50216, 46721.34017, 46828.01261, 46938.83406, 47054.16009, 47174.39478, 47300, 47431.50712, 47569.53177, 47714.79279, 47868.13687, 48030.57104, 48203.30621, 48387.81669, 48585.92322, 48799.9117, 49032.70799, 49288.14364, 49571.37673, 49889.59106, 50253.22991, 50678.34777, 51191.57749, 51842.25822, 52739.48924})]
        [InlineData(new double[] { 0.999, 0.5, 0.2, 0.1, 0.02, 0.01, 0.005, 0.001, 0.0001 }, new double[] { 80, 11320, 18520, 23810, 35010, 39350, 42850, 47300, 52739.48924 }, 50, false, new double[] {79.92, 80, 272.1086624, 811.0588834, 1451.795015, 2150.324299, 2938.261, 3840.709292, 4885.076262, 6104.766029, 7542.590893, 9255.246058, 11320, 11742.90762, 12183.38049, 12644.09127, 13128.14736, 13639.21713, 14181.69845, 14760.94953, 15383.61278, 15646.64079, 15918.56566, 16200.09273, 16492.00886, 16795.19557, 17110.64497, 17439.47911, 17782.97376, 18142.58781, 18520, 18711.33028, 18907.69079, 19109.3655, 19316.66234, 19529.91605, 19749.49128, 19975.78631, 20209.23726, 20450.32303, 20699.57102, 20957.56392, 21224.94759, 21502.44052, 21790.84508, 22091.06095, 22404.10146, 22731.11338, 23073.40124, 23432.45748, 23810, 24157.57474, 24524.28001, 24912.37821, 25324.55265, 25764.01826, 26234.67117, 26741.29457, 27289.84851, 27405.22163, 27522.63682, 27642.16737, 27763.89058, 27887.88799, 28014.24575, 28143.05493, 28274.41192, 28408.41885, 28545.18405, 28684.82257, 28827.4567, 28973.21666, 29122.24124, 29274.67859, 29430.68705, 29590.43615, 29754.10764, 29921.89668, 30094.01326, 30270.68362, 30452.15206, 30638.68286, 30830.5625, 31028.10222, 31231.64096, 31441.54866, 31658.23024, 31882.13003, 32113.73709, 32353.59134, 32602.29088, 32860.50055, 33128.96224, 33408.50714, 33700.07064, 34004.71037, 34323.62835, 34658.19834, 35010, 35167.01119, 35328.20768, 35493.81734, 35664.08706, 35839.2849, 36019.70258, 36205.65836, 36397.50029, 36595.6101, 36800.40765, 37012.35612, 37231.96826, 37459.81357, 37696.52709, 37942.81972, 38199.49081, 38467.44341, 38747.7029, 39041.4401, 39350, 39608.66497, 39881.34288, 40169.6491, 40475.49493, 40801.16453, 41149.4185, 41523.63617, 41928.01517, 42367.85859, 42850, 42907.47196, 43149.18715, 43482.11233, 43857.67606, 44288.87749, 44795.80759, 45412.00763, 45481.6423, 45553.02864, 45626.25912, 45701.43374, 45778.66089, 45858.05838, 45939.75445, 46023.88917, 46110.61583, 46200.10275, 46292.53525, 46388.11806, 46487.07814, 46589.668, 46696.1697, 46806.8997, 46922.21462, 47042.51843, 47168.27119, 47300, 47424.64334, 47555.81733, 47694.26039, 47840.84444, 47996.60925, 48162.80858, 48340.9734, 48533.00045, 48741.27914, 48968.87903, 49219.83597, 49499.60692, 49815.82892, 50179.66509, 50608.38421, 51130.84475, 51800.98947, 52739.48924})]
        public void ReturnsCorrectInterpolationFlowsOrStages(double[] exceedanceProbabilities, double[] flowOrStageValues, int equivalentRecordLength, bool usingStagesNotFlows, double[] expected)
        {
            Graphical graphical = new Graphical(exceedanceProbabilities, flowOrStageValues, equivalentRecordLength, usingStagesNotFlows: usingStagesNotFlows);
            graphical.ComputeGraphicalConfidenceLimits();
            Statistics.ContinuousDistribution[] actualDistributions = graphical.StageOrLogFlowDistributions;
            for (int i = 0; i < actualDistributions.Length; i++)
            {
                double actual;
                if (usingStagesNotFlows)
                {
                    actual = ((Normal)actualDistributions[i]).Mean;
                }
                else
                {
                    actual = Math.Exp(((LogNormal)actualDistributions[i]).Mean);
                }
                double tolerance = 0.01;
                double relativeError = Math.Abs((actual - expected[i]) / expected[i]);
                Assert.True(relativeError < tolerance);
            }
        }

        /// <summary>
        /// Test data: https://docs.google.com/spreadsheets/d/1GhRe3ECAFIKgRqEE8Xo6f_0lHYnHqUW0/edit?usp=sharing&ouid=105470256128470573157&rtpof=true&sd=true
        /// </summary>
        [Theory]
        [InlineData(new double[] { 0.999, 0.5, 0.2, 0.1, 0.02, 0.01, 0.005, 0.001, 0.0001 }, new double[] { 80, 11320, 18520, 23810, 35010, 39350, 42850, 47300, 52739.48924 }, 50, true, new double[] { 1509.709341, 1509.709341, 1509.709341, 1301.445858, 938.8908066, 808.033152, 744.7167479, 706.5653964, 681.6351651, 665.0216065, 654.3338407, 648.3264276, 936.6950816, 1518.409711, 1521.72264, 1527.325654, 1535.346512, 1545.975949, 1559.481499, 1576.228586, 1578.083495, 1604.155949, 1614.132482, 1624.903159, 1636.533478, 1649.098368, 1662.683898, 1677.389407, 1693.330149, 1710.640633, 1951.727123, 2444.050451, 2458.749416, 2474.122124, 2490.212619, 2507.069295, 2524.745459, 2543.299991, 2562.798112, 2583.31229, 2604.923306, 2627.721527, 2651.808416, 2677.298352, 2704.32083, 2733.023137, 2763.573636, 2796.165822, 2831.023388, 2868.406597, 3213.971137, 3560.721092, 3617.441053, 3679.148427, 3746.598515, 3820.719884, 3902.669555, 3993.911539, 3988.108179, 4111.327802, 4133.627306, 4156.500353, 4179.971818, 4204.068126, 4228.81738, 4254.2495, 4280.396379, 4307.292051, 4334.972887, 4363.477797, 4392.848473, 4423.129643, 4454.36937, 4486.619376, 4519.935408, 4554.377658, 4590.011227, 4626.906655, 4665.140523, 4704.796141, 4745.964326, 4788.744304, 4833.244742, 4879.584943, 4927.896225, 4978.323539, 5031.027349, 5086.185848, 5143.997574, 5204.684513, 5268.495807, 5335.712205, 5406.651447, 5481.674814, 5561.195163, 5645.686861, 5735.698178, 5831.866883, 6066.152997, 6570.886102, 6632.639747, 6696.793405, 6763.508959, 6832.96414, 6905.354588, 6980.896258, 7059.828225, 7142.415991, 7228.955379, 7319.777166, 7415.25261, 7515.800087, 7621.893119, 7734.070145, 7852.946505, 7979.22926, 8113.73567, 8257.416468, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428, 7900.752428 })]
        //[InlineData(new double[] { 0.999, 0.5, 0.2, 0.1, 0.02, 0.01, 0.005, 0.001, 0.0001 }, new double[] { 80, 11320, 18520, 23810, 35010, 39350, 42850, 47300, 52739.48924 }, 50, false, new double[] { 1.206231855, 1.206231855, 1.206231855, 0.289603274, 0.147164305, 0.108752318, 0.090920763, 0.080080975, 0.072647537, 0.067191684, 0.063016368, 0.059738529, 0.082510398, 0.128142493, 0.12282549, 0.118090615, 0.113861567, 0.110078444, 0.106694698, 0.103675137, 0.101002804, 0.099917003, 0.098983772, 0.098100751, 0.097267932, 0.096485621, 0.095754471, 0.09507553, 0.094450297, 0.093880799, 0.105633381, 0.130438049, 0.129700555, 0.128990953, 0.128309625, 0.12765705, 0.127033814, 0.126440622, 0.125878311, 0.125347868, 0.12485045, 0.124387406, 0.123960311, 0.123570994, 0.123221584, 0.122914559, 0.122652814, 0.122439731, 0.122279287, 0.122176168, 0.134756331, 0.146913767, 0.146602158, 0.146391636, 0.146294441, 0.146325818, 0.146504973, 0.146856446, 0.144823989, 0.147380399, 0.147522845, 0.147675515, 0.147838828, 0.148013228, 0.148199192, 0.148397224, 0.148607863, 0.148831685, 0.149069306, 0.149321385, 0.149588629, 0.149871797, 0.150171705, 0.150489229, 0.150825319, 0.151180996, 0.151557368, 0.151955635, 0.1523771, 0.15282318, 0.153295423, 0.153795518, 0.154325316, 0.15488685, 0.155482357, 0.156114309, 0.156785438, 0.157498784, 0.158257728, 0.159066056, 0.159928011, 0.160848378, 0.161832569, 0.162886738, 0.164017914, 0.16523417, 0.166544836, 0.167960756, 0.173587036, 0.186791006, 0.187640103, 0.188528207, 0.189457929, 0.190432139, 0.191453992, 0.19252697, 0.193654926, 0.194842137, 0.196093363, 0.197413928, 0.198809797, 0.200287694, 0.20185522, 0.20352101, 0.205294928, 0.207188293, 0.20921418, 0.211387781, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225, 0.200844225 })]
        public void ReturnsCorrectStandardDeviations(double[] exceedanceProbabilities, double[] flowOrStageValues, int equivalentRecordLength, bool usingStagesNotFlows, double[] expected)
        {
            Graphical graphical = new Graphical(exceedanceProbabilities, flowOrStageValues, equivalentRecordLength, usingStagesNotFlows: usingStagesNotFlows);
            graphical.ComputeGraphicalConfidenceLimits();
            Statistics.ContinuousDistribution[] actualDistributions = graphical.StageOrLogFlowDistributions;
            for (int i = 0; i < actualDistributions.Length; i++)
            {
                double actual;
                if (usingStagesNotFlows)
                {
                    actual = ((Normal)actualDistributions[i]).StandardDeviation;
                }
                else
                {
                    actual = ((LogNormal)actualDistributions[i]).StandardDeviation;
                }
                double tolerance = 0.025;
                double relativeError = Math.Abs((actual - expected[i]) / expected[i]);
                Assert.True(relativeError < tolerance);
            }
        }

    }
}
